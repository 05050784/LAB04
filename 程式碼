//CHECK POINT 1
#include "SevSeg.h"
SevSeg sevseg;
static unsigned long timer = millis();
static int deciSeconds = 2300;
byte a=0;
byte i;
byte b=0;
void setup() 
{
 	 byte numDigits = 4;
 	 byte digitPins[] = {2, 3, 4, 5};
 	 byte segmentPins[] = { 8, 9, 10, 11, 12, 13,14,15};
   bool resistorsOnSegments = false; // 'false' means resistors are on digit pins
 	 byte hardwareConfig = COMMON_CATHODE; // See README.md for options
 	 bool updateWithDelays = false; // Default. Recommended
 	 bool leadingZeros = false; // Use 'true' if you'd like to keep the leading zeros
  
   sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins, resistorsOnSegments, updateWithDelays, leadingZeros);
   sevseg.setBrightness(90);
   Serial.begin(9600);
}

void loop() 
{
      if (millis() - timer >= 100)
      {
          timer += 100;
          deciSeconds++; // 100 milliSeconds is equal to 1 deciSecond
    
          b=deciSeconds%100;
          if (b % 60 == 0)
          {
              a++;
              deciSeconds=0;
              Serial.println(a);
              for(i=0;i<a;i++)
              deciSeconds+=100;
           }
           if (deciSeconds == 2359) { // Reset to 0 after counting for 1000 seconds.
           deciSeconds=0;
        }
        sevseg.setNumber(deciSeconds);
     }
     sevseg.refreshDisplay(); // Must run repeatedly
}
//CHECK POINT 2
#include "SevSeg.h"
SevSeg sevseg;
static unsigned long timer = millis();
static int deciSeconds = 2300;
byte a=0;
byte i;
byte b=0;
const int buttonPin=6;
void setup() 
{
 	 pinMode(buttonPin,INPUT);
   byte numDigits = 4;
 	 byte digitPins[] = {2, 3, 4, 5};
 	 byte segmentPins[] = { 8, 9, 10, 11, 12, 13,14,15};
   bool resistorsOnSegments = false; // 'false' means resistors are on digit pins
 	 byte hardwareConfig = COMMON_CATHODE; // See README.md for options
 	 bool updateWithDelays = false; // Default. Recommended
 	 bool leadingZeros = false; // Use 'true' if you'd like to keep the leading zeros
  
   sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins, resistorsOnSegments, updateWithDelays, leadingZeros);
   sevseg.setBrightness(90);
   Serial.begin(9600);
}

void loop() 
{
      if (millis() - timer >= 100)
      {
          timer += 100;
          deciSeconds++; // 100 milliSeconds is equal to 1 deciSecond
          
          if (digitalRead(buttonPin)==1)
          {
		               deciSeconds=0000;
          }
          b=deciSeconds%100;
          if (b % 60 == 0)
          {
              a++;
              deciSeconds=0;
              Serial.println(a);
              for(i=0;i<a;i++)
              deciSeconds+=100;
           }
           if (deciSeconds == 2359) { // Reset to 0 after counting for 1000 seconds.
           deciSeconds=0;
        }
        sevseg.setNumber(deciSeconds);
     }
     sevseg.refreshDisplay(); // Must run repeatedly
}
